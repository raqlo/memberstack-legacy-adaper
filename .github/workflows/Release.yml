name: Release

on:
  push:
    branches: [master]

permissions:
  contents: write
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - run: npm ci
      - name: Run tests with error handling
        run: |
          if ! npm test; then
            echo "‚ùå Tests failed - stopping release pipeline"
            exit 1
          fi

  build-and-release:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get version from package.json
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Check tag availability
        run: |
          VERSION="v${{ steps.package-version.outputs.current-version }}"
          echo "üîç Checking if tag $VERSION exists..."

          if git tag -l | grep -q "^$VERSION$"; then
            echo "‚ùå Tag $VERSION already exists! Please bump version in package.json"
            echo "üí° Current version: ${{ steps.package-version.outputs.current-version }}"
            echo "üí° Try: npm version patch (for 0.0.2) or npm version minor (for 0.1.0)"
            exit 1
          fi

          echo "‚úÖ Tag $VERSION is available"

      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - run: npm ci

      - name: Build project
        run: npm run build

      - name: Update README with version
        run: |
          VERSION="v${{ steps.package-version.outputs.current-version }}"
          
          # Update version badge in README
          sed -i "s/version-[^-]*-blue/version-${VERSION}-blue/g" README.md
          
          # Update CDN links with new version
          sed -i "s/@v[0-9]\+\.[0-9]\+\.[0-9]\+/@${VERSION}/g" README.md
          
          echo "‚úÖ Updated README with version $VERSION"

      - name: Release with error handling
        run: |
          set -e
          VERSION="v${{ steps.package-version.outputs.current-version }}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if dist folder exists
          if [ ! -d "dist" ]; then
            echo "‚ùå dist/ folder not found after build"
            exit 1
          fi

          git add -f dist/
          git add README.md

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "‚ö†Ô∏è No changes detected - creating tag only"
            git tag "$VERSION"
            git push origin --tags
          else
            echo "üìù Changes detected - committing and tagging"
            git commit -m "build: $VERSION"
            git tag "$VERSION"
            git push origin master --tags
          fi

          echo "‚úÖ Successfully released $VERSION"